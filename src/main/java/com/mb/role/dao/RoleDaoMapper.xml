<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mb.role.dao.RoleDao">

	<resultMap id="resultMap" type="com.mb.role.entity.Role">
		<id property="id" column="ID" jdbcType="VARCHAR" />
		<result property="rolename" column="ROLENAME" jdbcType="VARCHAR" />
		<result property="createTime" column="CREATETIME" jdbcType="TIMESTAMP" />
		<result property="updateTime" column="UPDATETIME" jdbcType="TIMESTAMP" />
		<result property="createUser" column="CREATEUSER" jdbcType="VARCHAR" />
		<collection property="menuList" column="id" javaType="ArrayList" 
			ofType="com.mb.menu.entity.Menu" select="com.mb.menu.dao.MenuDao.getMenuListByRoleId" />
	</resultMap>
	
	<insert id="save" parameterType="java.util.Map">
		INSERT INTO base_role 
			(id, rolename, createTime, updateTime, createUser) 
		VALUES 
			(#{id,jdbcType=VARCHAR}, 
			#{rolename,jdbcType=VARCHAR},
			#{createTime,jdbcType=TIMESTAMP}, 
			#{updateTime,jdbcType=TIMESTAMP}, 
			#{createUser,jdbcType=VARCHAR})
	</insert>
	
	<!-- 批量插入用户角色对应关系 -->
	<!-- mysql -->
	<!-- <insert id="insertRoleMenu" parameterType="java.util.Map">
		insert into base_role_menu(id, roleId, menuId) values 
		<foreach collection="roleMenuList" item="roleMenu" separator=",">
			(#{roleMenu.id },#{roleMenu.roleId },#{roleMenu.menuId })
		</foreach>
	</insert> -->
	<!-- oracle -->
	<insert id="insertRoleMenu" parameterType="java.util.Map">
		insert into base_role_menu(id, roleId, menuId) 
		(
		<foreach collection="roleMenuList" index="" item="roleMenu" separator="union all">
			select
			#{roleMenu.id },#{roleMenu.roleId },#{roleMenu.menuId } 
			from dual
		</foreach>
		)
	</insert>
	
	<!-- 根据用户userId删除用户角色对应关系 -->
	<delete id="deleteRoleMenuByRoleId" parameterType="java.lang.String">
	   delete from base_role_menu where roleId = #{roleId} 
	</delete>
	
	<update id="update" parameterType="com.mb.role.entity.Role">
	    UPDATE base_role
	    <set>
	    	<if test="rolename!=null and rolename!='' ">
	            rolename = #{rolename,jdbcType=VARCHAR},
	        </if>
	        <if test="createTime!=null">
	            createTime = #{createTime,jdbcType=TIMESTAMP},
	        </if>
	        <if test="updateTime!=null">
	            updateTime = #{updateTime,jdbcType=TIMESTAMP},
	        </if>
	        <if test="createUser!=null and createUser!='' ">
	            createUser = #{createUser,jdbcType=VARCHAR}
	        </if>
	    </set>
	    WHERE id = #{id} 
	</update>
	
	<!-- 根据id删除数据 -->
	<delete id="deleteById" parameterType="java.lang.String">
	   delete from base_role where id = #{id} 
	</delete>

	<!-- 根据id查询用户 -->
	<select id="findById" parameterType="java.lang.String" resultType="com.mb.role.entity.Role">
		select 
		<include refid="base_column_list" /> 
		from base_role where id=#{id }
	</select>
	
	<!-- 根据参数查询用户 -->
	<select id="getListByParam" parameterType="java.util.Map" resultMap="resultMap">
		SELECT 
		<include refid="base_column_list" />
		FROM base_role 
		<include refid="base_select_where" />
	</select>
	
	<!-- 根据用户名查询对应角色 -->
	<select id="getRolesByUsername" parameterType="java.lang.String" resultType="com.mb.role.entity.Role">
		select 
		<include refid="base_column_list" /> 
		from base_role 
		where id in 
		(select roleId from base_user_role where userId=(select id from base_user where username=#{username })) 
	</select>
	
	<!-- 获得所有的角色 -->
	<select id="getAllRole" resultType="com.mb.role.entity.Role">
		select 
		<include refid="base_column_list" /> 
		from base_role 
	</select>
	
	<!-- 根据用户id查询对应角色 -->
	<select id="selectRoleListByUserId" resultMap="resultMap" parameterType="java.lang.String">
		select 
		<include refid="base_column_list" /> 
		from base_role 
		where id in 
		(select roleId from base_user_role where userId=#{id })
	</select>
	
	<sql id="base_column_list">
       	 id, 
       	 rolename, 
       	 createTime,
       	 updateTime,
       	 createUser
 	 </sql>
 	 
 	 <sql id="base_select_where">
		<where>
			<if test="id != null and id != '' ">
	          and ID = #{id,jdbcType=VARCHAR}
	        </if>
		    <if test="rolename != null and rolename != '' ">
	          and ROLENAME LIKE '%' || #{rolename} || '%'
	        </if>
	        <if test="createTime != null and createTime != '' ">
	          and CREATETIME = #{createTime,jdbcType=TIMESTAMP}
	        </if>
	        <if test="updateTime != null and updateTime != '' ">
	          and UPDATETIME = #{updateTime,jdbcType=TIMESTAMP}
	        </if>
	        <if test="createUser != null and createUser != '' ">
	          and CREATEUSER = #{createUser,jdbcType=VARCHAR}
	        </if>
		</where>
	</sql>
	
</mapper>