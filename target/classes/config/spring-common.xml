<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 自动扫描 -->
	<context:component-scan base-package="com.mb" />
	
	<!-- 数据源1 -->
	<bean id ="local" class= "org.apache.commons.dbcp.BasicDataSource" destroy-method="close">  
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@10.100.24.27:1521:jeecg" /> 
		<property name="username" value="mbweb" />
		<property name="password" value="mbweb" />
		<!-- 连接池启动时的初始值 -->
        <property name="initialSize" value="3" />
        <!-- 连接池的最大值 -->
        <property name="maxActive" value="300" />
        <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
        <property name="maxIdle" value="2" />
        <!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
        <property name="minIdle" value="1" />
	</bean >
	
	<!-- 数据源2 -->
	<bean id ="bi" class= "org.apache.commons.dbcp.BasicDataSource" >  
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<!-- <property name="url" value="jdbc:mysql://10.100.28.45:3306/mb_base" />
		<property name="username" value="admin" />
		<property name="password" value="admin52" /> -->
		<property name="url" value="jdbc:mysql://127.0.0.1:3306/test" />
		<property name="username" value="root" />
		<property name="password" value="root" />
	</bean >

	<!-- 动态配置数据源 -->
	<bean id="dataSource" class="com.mb.db.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry value-ref="local" key="local"></entry>
				<entry value-ref="bi" key="bi"></entry>
			</map>
		</property>
		<!-- 默认使用local的数据源 -->
		<property name="defaultTargetDataSource" ref="local"></property>
	</bean>  
	
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件，**表示迭代查找 -->
		<property name="mapperLocations" value="classpath:com/mb/**/*.xml" />
		<property name="configLocation" value="classpath:config/mybatis-config.xml" />
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 ,包下的类需要使用@MapperScan注解,否则容器注入会失败 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.mb.**.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	
	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 配置事务的传播特性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<!-- 配置AOP -->
	<aop:config>
		<!-- 切点 -->
		<aop:pointcut expression="execution(* com.mb.**.service..*.*(..))" id="pointcut" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut" />
	</aop:config>
	
	<!-- 配置redis --> 
	<!-- <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:/config/redis.properties</value>
			</list>
		</property>
	</bean>  --> 
	
	<!-- 引入redis配置文件 --> 
	<!-- <import resource="classpath:config/redis-context.xml" /> -->
	
</beans>